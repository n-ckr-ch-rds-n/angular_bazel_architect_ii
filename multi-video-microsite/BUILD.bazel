load("@npm//@angular-devkit/architect-cli:index.bzl", "architect", "architect_test")
load("@npm//@bazel/typescript:index.bzl", "ts_library")
load("//json-to-ts:index.bzl", "json_to_ts")
load("//cli-builder:index.bzl", "cli")

# These dependencies are needed for any ng command
filegroup(
    name = "common_deps",
    srcs = [
        "//:angular.json",
        "tsconfig.json",
    ],
    visibility = ["//:__subpackages__"],
)

APPLICATION_DEPS = [
    "//multi-video-microsite:common_deps",
    "@npm//@angular/cli",
    "@npm//@angular/core",
    "@npm//@angular/flex-layout",
    "@npm//@angular/material",
    "@npm//@angular/router",
    "@npm//@angular/platform-browser-dynamic",
    "@npm//@angular-devkit/build-angular",
    "@npm//@rezonence/core",
    "@npm//@rezonence/sdk",
    "@npm//@rezonence/video-player",
    "@npm//rxjs",
    "@npm//mime",
    "@npm//zone.js",
    "@npm//tslib",
    "@npm//typescript",
]

json_to_ts(
    name = "json_files",
    srcs = ["proxy.conf.json"]
)

ts_library(
    name = "server",
    srcs = [
        "local-freewall/server.ts",
    ] + glob(["src/environments/*.ts"]) + glob(["src/app/config/*.ts"]) + ["json_files"],
    deps = [
        "@npm//@rezonence/core",
        "@npm//@rezonence/schema-generator",
        "@npm//@rezonence/sdk",
        "@npm//@djabry/fs-s3",
        "@npm//@types/node",
        "@npm//aws-sdk",
    ]
)

cli(
    name = "server_cli",
    bin_name = "server_bin",
    entry_point = "local-freewall/server.ts",
    deps = [
        "server",
    ],
)

architect(
    name = "build",
    args = [
        "multi-video-microsite:build",
        "--outputPath=$(@D)",
    ],
    configuration_env_vars = ["NG_BUILD_CACHE"],
    data = glob(
        [
            "src/**/*",
        ],
        exclude = [
            "src/**/*.spec.ts",
            "src/test.ts",
        ],
    ) + APPLICATION_DEPS + [
        "tsconfig.app.json",
    ],
    output_dir = True,
)

architect(
    name = "build_prod",
    args = [
        "multi-video-microsite:build:production",
        "--outputPath=$(@D)",
    ],
    configuration_env_vars = ["NG_BUILD_CACHE"],
    data = glob(
        [
            "src/**/*",
        ],
        exclude = [
            "src/**/*.spec.ts",
            "src/test.ts",
        ],
    ) + APPLICATION_DEPS + [
        "tsconfig.app.json",
    ],
    output_dir = True,
)

architect_test(
    name = "test",
    args = ["multi-video-microsite:test"],
    configuration_env_vars = ["NG_BUILD_CACHE"],
    data = glob([
        "src/**/*",
    ]) + APPLICATION_DEPS + [
        "karma.conf.js",
        "tsconfig.spec.json",
        "@npm//@types/jasmine",
        "@npm//@types/node",
        "@npm//karma",
        "@npm//karma-chrome-launcher",
        "@npm//karma-coverage-istanbul-reporter",
        "@npm//karma-jasmine",
        "@npm//karma-jasmine-html-reporter",
    ],
    tags = [
        "browser:chromium-local",
        # This fails locally on macos buildkite trying to capture Chrome.
        # Tested locally on OSX and it works so it is something to do with the
        # buildkite osx machine chrome version/configuration.
        # ==================== Test output for //:test:
        # 29 01 2020 23:31:42.804:INFO [karma-server]: Karma v4.1.0 server started at http://0.0.0.0:9876/
        # 29 01 2020 23:31:42.806:INFO [launcher]: Launching browsers ChromeHeadlessNoSandbox with concurrency unlimited
        # 29 01 2020 23:31:42.808:INFO [launcher]: Starting browser ChromeHeadless
        # 29 01 2020 23:32:42.815:WARN [launcher]: ChromeHeadless have not captured in 60000 ms, killing.
        # 29 01 2020 23:32:44.818:WARN [launcher]: ChromeHeadless was not killed in 2000 ms, sending SIGKILL.
        # 29 01 2020 23:32:46.822:WARN [launcher]: ChromeHeadless was not killed by SIGKILL in 2000 ms, continuing.
        "no-bazelci-mac",
    ],
)

architect_test(
    name = "e2e",
    args = [
        "multi-video-microsite:e2e",
        "--no-webdriverUpdate",
    ],
    configuration_env_vars = ["NG_BUILD_CACHE"],
    data = glob([
        "src/*",
        "src/**",
        "e2e/*",
        "e2e/**",
    ]) + APPLICATION_DEPS + [
        "tsconfig.app.json",
        "@npm//protractor",
        "@npm//jasmine-spec-reporter",
        "@npm//ts-node",
        "@npm//@types/jasmine",
        "@npm//@types/jasminewd2",
        "@npm//@types/node",
    ],
    tags = [
        "browser:chromium-local",
        # Fails in buildkite with this error
        # [19:48:16] E/launcher - unknown error: cannot find Chrome binary
        #   (Driver info: chromedriver=79.0.3945.36 (3582db32b33893869b8c1339e8f4d9ed1816f143-refs/branch-heads/3945@{#614}),platform=Mac OS X 10.15.3 x86_64)
        # [19:48:16] E/launcher - WebDriverError: unknown error: cannot find Chrome binary
        #   (Driver info: chromedriver=79.0.3945.36 (3582db32b33893869b8c1339e8f4d9ed1816f143-refs/branch-heads/3945@{#614}),platform=Mac OS X 10.15.3 x86_64)
        #     at Object.checkLegacyResponse
        "no-bazelci-mac",
    ],
)

architect(
    name = "lint",
    args = ["multi-video-microsite:lint"],
    data = glob([
        "src/**/*",
    ]) + [
        "//multi-video-microsite:common_deps",
        "tsconfig.spec.json",
        "tsconfig.app.json",
        ".eslintrc.json",
        "@npm//@angular/cli",
        "@npm//@angular-eslint/builder",
        "@npm//eslint",
        "@npm//@types/eslint"
    ],
)

architect(
    name = "serve",
    args = [
        "multi-video-microsite:serve"
    ],
    configuration_env_vars = ["NG_BUILD_CACHE"],
    data = glob(
        [
            "src/*",
            "src/**",
        ],
        exclude = [
            "src/**/*.spec.ts",
            "src/test.ts",
        ],
    ) + APPLICATION_DEPS + [
        "tsconfig.app.json",
        "proxy.conf.json"
    ],
    tags = ["ibazel_notify_changes"],
)

architect(
    name = "serve_prod",
    args = [
        "multi-video-microsite:serve:production",
    ],
    configuration_env_vars = ["NG_BUILD_CACHE"],
    data = glob(
        [
            "src/*",
            "src/**",
        ],
        exclude = [
            "src/**/*.spec.ts",
            "src/test.ts",
        ],
    ) + APPLICATION_DEPS + [
        "tsconfig.app.json",
    ],
    tags = ["ibazel_notify_changes"],
)
